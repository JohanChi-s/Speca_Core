/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ActionEvent, // @ts-ignore
  Collection, // @ts-ignore
  Document,
} from "@prisma/client";

export class ActionEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ActionEventCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActionEventCountArgs>
  ): Promise<number> {
    return this.prisma.actionEvent.count(args);
  }

  async actionEvents<T extends Prisma.ActionEventFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActionEventFindManyArgs>
  ): Promise<ActionEvent[]> {
    return this.prisma.actionEvent.findMany(args);
  }
  async actionEvent<T extends Prisma.ActionEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActionEventFindUniqueArgs>
  ): Promise<ActionEvent | null> {
    return this.prisma.actionEvent.findUnique(args);
  }
  async createActionEvent<T extends Prisma.ActionEventCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActionEventCreateArgs>
  ): Promise<ActionEvent> {
    return this.prisma.actionEvent.create<T>(args);
  }
  async updateActionEvent<T extends Prisma.ActionEventUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActionEventUpdateArgs>
  ): Promise<ActionEvent> {
    return this.prisma.actionEvent.update<T>(args);
  }
  async deleteActionEvent<T extends Prisma.ActionEventDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ActionEventDeleteArgs>
  ): Promise<ActionEvent> {
    return this.prisma.actionEvent.delete(args);
  }

  async getCollection(parentId: string): Promise<Collection | null> {
    return this.prisma.actionEvent
      .findUnique({
        where: { id: parentId },
      })
      .collection();
  }

  async getDocument(parentId: string): Promise<Document | null> {
    return this.prisma.actionEvent
      .findUnique({
        where: { id: parentId },
      })
      .document();
  }
}
