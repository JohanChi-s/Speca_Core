/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Archived, // @ts-ignore
  Collection, // @ts-ignore
  Document,
} from "@prisma/client";

export class ArchivedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ArchivedCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchivedCountArgs>
  ): Promise<number> {
    return this.prisma.archived.count(args);
  }

  async archiveds<T extends Prisma.ArchivedFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchivedFindManyArgs>
  ): Promise<Archived[]> {
    return this.prisma.archived.findMany(args);
  }
  async archived<T extends Prisma.ArchivedFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchivedFindUniqueArgs>
  ): Promise<Archived | null> {
    return this.prisma.archived.findUnique(args);
  }
  async createArchived<T extends Prisma.ArchivedCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchivedCreateArgs>
  ): Promise<Archived> {
    return this.prisma.archived.create<T>(args);
  }
  async updateArchived<T extends Prisma.ArchivedUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchivedUpdateArgs>
  ): Promise<Archived> {
    return this.prisma.archived.update<T>(args);
  }
  async deleteArchived<T extends Prisma.ArchivedDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ArchivedDeleteArgs>
  ): Promise<Archived> {
    return this.prisma.archived.delete(args);
  }

  async findCollections(
    parentId: string,
    args: Prisma.CollectionFindManyArgs
  ): Promise<Collection[]> {
    return this.prisma.archived
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .collections(args);
  }

  async findDocuments(
    parentId: string,
    args: Prisma.DocumentFindManyArgs
  ): Promise<Document[]> {
    return this.prisma.archived
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .documents(args);
  }
}
