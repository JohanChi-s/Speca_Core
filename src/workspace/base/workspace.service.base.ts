/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Workspace, // @ts-ignore
  Team, // @ts-ignore
  User,
} from "@prisma/client";

export class WorkspaceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.WorkspaceCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkspaceCountArgs>
  ): Promise<number> {
    return this.prisma.workspace.count(args);
  }

  async workspaces<T extends Prisma.WorkspaceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkspaceFindManyArgs>
  ): Promise<Workspace[]> {
    return this.prisma.workspace.findMany(args);
  }
  async workspace<T extends Prisma.WorkspaceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkspaceFindUniqueArgs>
  ): Promise<Workspace | null> {
    return this.prisma.workspace.findUnique(args);
  }
  async createWorkspace<T extends Prisma.WorkspaceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkspaceCreateArgs>
  ): Promise<Workspace> {
    return this.prisma.workspace.create<T>(args);
  }
  async updateWorkspace<T extends Prisma.WorkspaceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkspaceUpdateArgs>
  ): Promise<Workspace> {
    return this.prisma.workspace.update<T>(args);
  }
  async deleteWorkspace<T extends Prisma.WorkspaceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WorkspaceDeleteArgs>
  ): Promise<Workspace> {
    return this.prisma.workspace.delete(args);
  }

  async findTeams(
    parentId: string,
    args: Prisma.TeamFindManyArgs
  ): Promise<Team[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .teams(args);
  }

  async findUser(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<User[]> {
    return this.prisma.workspace
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .user(args);
  }
}
