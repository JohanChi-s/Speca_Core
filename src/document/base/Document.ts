/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ActionEvent } from "../../actionEvent/base/ActionEvent";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsDate,
  IsBoolean,
  IsInt,
} from "class-validator";
import { Type } from "class-transformer";
import { Archived } from "../../archived/base/Archived";
import { Comment } from "../../comment/base/Comment";
import { Member } from "../../member/base/Member";

@ObjectType()
class Document {
  @ApiProperty({
    required: false,
    type: () => [ActionEvent],
  })
  @ValidateNested()
  @Type(() => ActionEvent)
  @IsOptional()
  actionEvents?: Array<ActionEvent>;

  @ApiProperty({
    required: true,
    type: () => [Archived],
  })
  @ValidateNested()
  @Type(() => Archived)
  @IsOptional()
  archiveds?: Array<Archived>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  authorId!: string;

  @ApiProperty({
    required: true,
    type: () => [Document],
  })
  @ValidateNested()
  @Type(() => Document)
  @IsOptional()
  childDocuments?: Array<Document>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  collectionId!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Comment],
  })
  @ValidateNested()
  @Type(() => Comment)
  @IsOptional()
  comments?: Array<Comment>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Document],
  })
  @ValidateNested()
  @Type(() => Document)
  @IsOptional()
  documents?: Array<Document>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  emoji!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isFullWidth!: boolean | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isPublic!: boolean;

  @ApiProperty({
    required: true,
    type: () => [Member],
  })
  @ValidateNested()
  @Type(() => Member)
  @IsOptional()
  members?: Array<Member>;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  publishedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  revision!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  templateId!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  text!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  title!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Document as Document };
