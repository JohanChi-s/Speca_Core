/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Position, // @ts-ignore
  Comment,
} from "@prisma/client";

export class PositionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.PositionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionCountArgs>
  ): Promise<number> {
    return this.prisma.position.count(args);
  }

  async positions<T extends Prisma.PositionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionFindManyArgs>
  ): Promise<Position[]> {
    return this.prisma.position.findMany(args);
  }
  async position<T extends Prisma.PositionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionFindUniqueArgs>
  ): Promise<Position | null> {
    return this.prisma.position.findUnique(args);
  }
  async createPosition<T extends Prisma.PositionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionCreateArgs>
  ): Promise<Position> {
    return this.prisma.position.create<T>(args);
  }
  async updatePosition<T extends Prisma.PositionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionUpdateArgs>
  ): Promise<Position> {
    return this.prisma.position.update<T>(args);
  }
  async deletePosition<T extends Prisma.PositionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PositionDeleteArgs>
  ): Promise<Position> {
    return this.prisma.position.delete(args);
  }

  async getComments(parentId: string): Promise<Comment | null> {
    return this.prisma.position
      .findUnique({
        where: { id: parentId },
      })
      .comments();
  }
}
